{
  "version": 3,
  "sources": ["../../src/functions/auth.js"],
  "sourcesContent": ["import { db } from 'src/lib/db'\nimport { DbAuthHandler } from '@redwoodjs/api'\n\nexport const handler = async (event, context) => {\n  const forgotPasswordOptions = {\n    // handler() is invoked after verifying that a user was found with the given\n    // username. This is where you can send the user an email with a link to\n    // reset their password. With the default dbAuth routes and field names, the\n    // URL to reset the password will be:\n    //\n    // https://example.com/reset-password?resetToken=${user.resetToken}\n    //\n    // Whatever is returned from this function will be returned from\n    // the `forgotPassword()` function that is destructured from `useAuth()`\n    // You could use this return value to, for example, show the email\n    // address in a toast message so the user will know it worked and where\n    // to look for the email.\n    handler: (user) => {\n      return user\n    },\n\n    // How long the resetToken is valid for, in seconds (default is 24 hours)\n    expires: 60 * 60 * 24,\n\n    errors: {\n      // for security reasons you may want to be vague here rather than expose\n      // the fact that the email address wasn't found (prevents fishing for\n      // valid email addresses)\n      usernameNotFound: 'Username not found',\n      // if the user somehow gets around client validation\n      usernameRequired: 'Username is required',\n    },\n  }\n\n  const loginOptions = {\n    // handler() is called after finding the user that matches the\n    // username/password provided at login, but before actually considering them\n    // logged in. The `user` argument will be the user in the database that\n    // matched the username/password.\n    //\n    // If you want to allow this user to log in simply return the user.\n    //\n    // If you want to prevent someone logging in for another reason (maybe they\n    // didn't validate their email yet), throw an error and it will be returned\n    // by the `logIn()` function from `useAuth()` in the form of:\n    // `{ message: 'Error message' }`\n    handler: (user) => {\n      return user\n    },\n\n    errors: {\n      usernameOrPasswordMissing: 'Both username and password are required',\n      usernameNotFound: 'Username ${username} not found',\n      // For security reasons you may want to make this the same as the\n      // usernameNotFound error so that a malicious user can't use the error\n      // to narrow down if it's the username or password that's incorrect\n      incorrectPassword: 'Incorrect password for ${username}',\n    },\n\n    // How long a user will remain logged in, in seconds\n    expires: 60 * 60 * 24 * 365 * 10,\n  }\n\n  const resetPasswordOptions = {\n    // handler() is invoked after the password has been successfully updated in\n    // the database. Returning anything truthy will automatically logs the user\n    // in. Return `false` otherwise, and in the Reset Password page redirect the\n    // user to the login page.\n    handler: (user) => {\n      return user\n    },\n\n    // If `false` then the new password MUST be different than the current one\n    allowReusedPassword: true,\n\n    errors: {\n      // the resetToken is valid, but expired\n      resetTokenExpired: 'resetToken is expired',\n      // no user was found with the given resetToken\n      resetTokenInvalid: 'resetToken is invalid',\n      // the resetToken was not present in the URL\n      resetTokenRequired: 'resetToken is required',\n      // new password is the same as the old password (apparently they did not forget it)\n      reusedPassword: 'Must choose a new password',\n    },\n  }\n\n  const signupOptions = {\n    // Whatever you want to happen to your data on new user signup. Redwood will\n    // check for duplicate usernames before calling this handler. At a minimum\n    // you need to save the `username`, `hashedPassword` and `salt` to your\n    // user table. `userAttributes` contains any additional object members that\n    // were included in the object given to the `signUp()` function you got\n    // from `useAuth()`.\n    //\n    // If you want the user to be immediately logged in, return the user that\n    // was created.\n    //\n    // If this handler throws an error, it will be returned by the `signUp()`\n    // function in the form of: `{ error: 'Error message' }`.\n    //\n    // If this returns anything else, it will be returned by the\n    // `signUp()` function in the form of: `{ message: 'String here' }`.\n    handler: ({ username, hashedPassword, salt, userAttributes }) => {\n      return db.user.create({\n        data: {\n          email: username,\n          hashedPassword: hashedPassword,\n          salt: salt,\n          // name: userAttributes.name\n        },\n      })\n    },\n\n    errors: {\n      // `field` will be either \"username\" or \"password\"\n      fieldMissing: '${field} is required',\n      usernameTaken: 'Username `${username}` already in use',\n    },\n  }\n\n  const authHandler = new DbAuthHandler(event, context, {\n    // Provide prisma db client\n    db: db,\n\n    // The name of the property you'd call on `db` to access your user table.\n    // ie. if your Prisma model is named `User` this value would be `user`, as in `db.user`\n    authModelAccessor: 'user',\n\n    // A map of what dbAuth calls a field to what your database calls it.\n    // `id` is whatever column you use to uniquely identify a user (probably\n    // something like `id` or `userId` or even `email`)\n    authFields: {\n      id: 'id',\n      username: 'email',\n      hashedPassword: 'hashedPassword',\n      salt: 'salt',\n      resetToken: 'resetToken',\n      resetTokenExpiresAt: 'resetTokenExpiresAt',\n    },\n\n    forgotPassword: forgotPasswordOptions,\n    login: loginOptions,\n    resetPassword: resetPasswordOptions,\n    signup: signupOptions,\n\n    cookie: {\n      HttpOnly: true,\n      Path: '/',\n      SameSite: 'Strict',\n      Secure: true,\n      // Domain: 'example.com',\n    },\n  })\n\n  return await authHandler.invoke()\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;;;;;gBAAA;AACA,iBAA8B;AAEvB,MAAMA,UAAU,OAAOC,OAAOC,YAAY;AAC/C,QAAMC,wBAAwB;IAa5BH,SAAUI,UAAS;AACjB,aAAOA;IACR;IAGDC,SAAS,KAAK,KAAK;IAEnBC,QAAQ;MAINC,kBAAkB;MAElBC,kBAAkB;IANZ;EApBoB;AA8B9B,QAAMC,eAAe;IAYnBT,SAAUI,UAAS;AACjB,aAAOA;IACR;IAEDE,QAAQ;MACNI,2BAA2B;MAC3BH,kBAAkB;MAIlBI,mBAAmB;IANb;IAURN,SAAS,KAAK,KAAK,KAAK,MAAM;EA1BX;AA6BrB,QAAMO,uBAAuB;IAK3BZ,SAAUI,UAAS;AACjB,aAAOA;IACR;IAGDS,qBAAqB;IAErBP,QAAQ;MAENQ,mBAAmB;MAEnBC,mBAAmB;MAEnBC,oBAAoB;MAEpBC,gBAAgB;IARV;EAZmB;AAwB7B,QAAMC,gBAAgB;IAgBpBlB,SAAS,CAAC;MAAEmB;MAAUC;MAAgBC;MAAMC;IAAlC,MAAuD;AAC/D,aAAOC,aAAGnB,KAAKoB,OAAO;QACpBC,MAAM;UACJC,OAAOP;UACPC;UACAC;QAHI;MADc,CAAf;IAQR;IAEDf,QAAQ;MAENqB,cAAc;MACdC,eAAe;IAHT;EA3BY;AAkCtB,QAAMC,cAAc,IAAIC,yBAAc7B,OAAOC,SAAS;IAEpDqB,IAAIA;IAIJQ,mBAAmB;IAKnBC,YAAY;MACVC,IAAI;MACJd,UAAU;MACVC,gBAAgB;MAChBC,MAAM;MACNa,YAAY;MACZC,qBAAqB;IANX;IASZC,gBAAgBjC;IAChBkC,OAAO5B;IACP6B,eAAe1B;IACf2B,QAAQrB;IAERsB,QAAQ;MACNC,UAAU;MACVC,MAAM;MACNC,UAAU;MACVC,QAAQ;IAJF;EAzB4C,CAAlC;AAkCpB,SAAO,MAAMf,YAAYgB,OAAZ;AACd;",
  "names": ["handler", "event", "context", "forgotPasswordOptions", "user", "expires", "errors", "usernameNotFound", "usernameRequired", "loginOptions", "usernameOrPasswordMissing", "incorrectPassword", "resetPasswordOptions", "allowReusedPassword", "resetTokenExpired", "resetTokenInvalid", "resetTokenRequired", "reusedPassword", "signupOptions", "username", "hashedPassword", "salt", "userAttributes", "db", "create", "data", "email", "fieldMissing", "usernameTaken", "authHandler", "DbAuthHandler", "authModelAccessor", "authFields", "id", "resetToken", "resetTokenExpiresAt", "forgotPassword", "login", "resetPassword", "signup", "cookie", "HttpOnly", "Path", "SameSite", "Secure", "invoke"]
}
