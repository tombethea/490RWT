{"version":3,"file":"src_pages_Post_PostsPage_PostsPage_js.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;AANA;AACA;AACA;AAEA;AAEA;AAQA;;AAEA;AACA;;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAIA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AAAA;AAWA;AACA;AAAA;AAMA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAHA;AAQA;AAAA;AAAA;AACA;AACA;AAHA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAtBA;AAsCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3GA;;;;AAJA;AAEA;AAEA;AAWA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAKA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;;AAEA;AACA;AACA;;AAEA","sources":["webpack://web/./src/components/Post/Posts/Posts.js","webpack://web/./src/components/Post/PostsCell/PostsCell.js","webpack://web/./src/pages/Post/PostsPage/PostsPage.js"],"sourcesContent":["import { useMutation } from '@redwoodjs/web'\nimport { toast } from '@redwoodjs/web/toast'\nimport { Link, routes } from '@redwoodjs/router'\n\nimport { QUERY } from 'src/components/Post/PostsCell'\n\nconst DELETE_POST_MUTATION = gql`\n  mutation DeletePostMutation($id: Int!) {\n    deletePost(id: $id) {\n      id\n    }\n  }\n`\n\nconst MAX_STRING_LENGTH = 150\n\nconst truncate = (text) => {\n  let output = text\n  if (text && text.length > MAX_STRING_LENGTH) {\n    output = output.substring(0, MAX_STRING_LENGTH) + '...'\n  }\n  return output\n}\n\nconst jsonTruncate = (obj) => {\n  return truncate(JSON.stringify(obj, null, 2))\n}\n\nconst timeTag = (datetime) => {\n  return (\n    <time dateTime={datetime} title={datetime}>\n      {new Date(datetime).toUTCString()}\n    </time>\n  )\n}\n\nconst checkboxInputTag = (checked) => {\n  return <input type=\"checkbox\" checked={checked} disabled />\n}\n\nconst PostsList = ({ posts }) => {\n  const [deletePost] = useMutation(DELETE_POST_MUTATION, {\n    onCompleted: () => {\n      toast.success('Post deleted')\n    },\n    // This refetches the query on the list page. Read more about other ways to\n    // update the cache over here:\n    // https://www.apollographql.com/docs/react/data/mutations/#making-all-other-cache-updates\n    refetchQueries: [{ query: QUERY }],\n    awaitRefetchQueries: true,\n  })\n\n  const onDeleteClick = (id) => {\n    if (confirm('Are you sure you want to delete post ' + id + '?')) {\n      deletePost({ variables: { id } })\n    }\n  }\n\n  return (\n    <div className=\"rw-segment rw-table-wrapper-responsive\">\n      <table className=\"rw-table\">\n        <thead>\n          <tr>\n            <th>Id</th>\n            <th>Title</th>\n            <th>Body</th>\n            <th>Created at</th>\n            <th>&nbsp;</th>\n          </tr>\n        </thead>\n        <tbody>\n          {posts.map((post) => (\n            <tr key={post.id}>\n              <td>{truncate(post.id)}</td>\n              <td>{truncate(post.title)}</td>\n              <td>{truncate(post.body)}</td>\n              <td>{timeTag(post.createdAt)}</td>\n              <td>\n                <nav className=\"rw-table-actions\">\n                  <Link\n                    to={routes.post({ id: post.id })}\n                    title={'Show post ' + post.id + ' detail'}\n                    className=\"rw-button rw-button-small\"\n                  >\n                    Show\n                  </Link>\n                  <Link\n                    to={routes.editPost({ id: post.id })}\n                    title={'Edit post ' + post.id}\n                    className=\"rw-button rw-button-small rw-button-blue\"\n                  >\n                    Edit\n                  </Link>\n                  <a\n                    href=\"#\"\n                    title={'Delete post ' + post.id}\n                    className=\"rw-button rw-button-small rw-button-red\"\n                    onClick={() => onDeleteClick(post.id)}\n                  >\n                    Delete\n                  </a>\n                </nav>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default PostsList\n","import { Link, routes } from '@redwoodjs/router'\n\nimport Posts from 'src/components/Post/Posts'\n\nexport const QUERY = gql`\n  query POSTS {\n    posts {\n      id\n      title\n      body\n      createdAt\n    }\n  }\n`\n\nexport const Loading = () => <div>Loading...</div>\n\nexport const Empty = () => {\n  return (\n    <div className=\"rw-text-center\">\n      {'No posts yet. '}\n      <Link to={routes.newPost()} className=\"rw-link\">\n        {'Create one?'}\n      </Link>\n    </div>\n  )\n}\n\nexport const Success = ({ posts }) => {\n  return <Posts posts={posts} />\n}\n","import PostsCell from 'src/components/Post/PostsCell'\n\nconst PostsPage = () => {\n  return <PostsCell />\n}\n\nexport default PostsPage\n"],"names":[],"sourceRoot":""}