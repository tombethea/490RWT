"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.writePrerenderedHtmlFile = exports.runPrerender = void 0;

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/interopRequireWildcard"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/entries"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));

var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/some"));

var _values = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/values"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _react = _interopRequireDefault(require("react"));

var _cheerio = _interopRequireDefault(require("cheerio"));

var _server = _interopRequireDefault(require("react-dom/server"));

var _api = require("@redwoodjs/internal/dist/build/babel/api");

var _web = require("@redwoodjs/internal/dist/build/babel/web");

var _paths = require("@redwoodjs/internal/dist/paths");

var _router = require("@redwoodjs/router");

var _web2 = require("@redwoodjs/web");

var _babelPluginRedwoodPrerenderMediaImports = _interopRequireDefault(require("./babelPlugins/babel-plugin-redwood-prerender-media-imports"));

var _errors = require("./errors");

var _graphql = require("./graphql/graphql");

var _internal = require("./internal");

async function recursivelyRender(App, renderPath, gqlHandler, queryCache) {
  var _context, _context2;

  let shouldShowGraphqlHandlerNotFoundWarn = false; // Execute all gql queries we haven't already fetched

  await _promise.default.all((0, _map.default)(_context = (0, _entries.default)(queryCache)).call(_context, async ([cacheKey, value]) => {
    if (value.hasProcessed) {
      // Already fetched, or decided that we can't render this one; skip it!
      return _promise.default.resolve('');
    }

    try {
      const resultString = await (0, _graphql.executeQuery)(gqlHandler, value.query, value.variables);
      let result;

      try {
        result = JSON.parse(resultString);
      } catch (e) {
        if (e instanceof SyntaxError) {
          throw new _errors.JSONParseError({
            query: value.query,
            variables: value.variables,
            result: resultString
          });
        }
      }

      if (result.errors) {
        var _result$errors$, _result$errors$$exten;

        const message = result.errors[0].message ?? (0, _stringify.default)(result.errors, null, 4);

        if (((_result$errors$ = result.errors[0]) === null || _result$errors$ === void 0 ? void 0 : (_result$errors$$exten = _result$errors$.extensions) === null || _result$errors$$exten === void 0 ? void 0 : _result$errors$$exten.code) === 'UNAUTHENTICATED') {
          console.error(`\n \n 🛑  Cannot prerender the query ${(0, _web2.getOperationName)(value.query)} as it requires auth. \n`);
        }

        throw new _errors.PrerenderGqlError(message);
      }

      queryCache[cacheKey] = { ...value,
        data: result.data,
        hasProcessed: true
      };
      return result;
    } catch (e) {
      if (e instanceof _errors.GqlHandlerImportError) {
        // We need to need to swallow the error here, so that
        // we can continue to render the page, with cells in loading state
        // e.g. if the GQL handler is located elsewhere
        shouldShowGraphqlHandlerNotFoundWarn = true;
        queryCache[cacheKey] = { ...value,
          // tried to fetch, but failed
          renderLoading: true,
          hasProcessed: true
        };
        return;
      } else {
        // Otherwise forward on the error
        throw e;
      }
    }
  }));

  const componentAsHtml = _server.default.renderToString( /*#__PURE__*/_react.default.createElement(_router.LocationProvider, {
    location: {
      pathname: renderPath
    }
  }, /*#__PURE__*/_react.default.createElement(_web2.CellCacheContextProvider, {
    queryCache: queryCache
  }, /*#__PURE__*/_react.default.createElement(App, null))));

  if ((0, _some.default)(_context2 = (0, _values.default)(queryCache)).call(_context2, value => !value.hasProcessed)) {
    // We found new queries that we haven't fetched yet. Execute all new
    // queries and render again
    return recursivelyRender(App, renderPath, gqlHandler, queryCache);
  } else {
    if (shouldShowGraphqlHandlerNotFoundWarn) {
      console.warn('\n  ⚠️  Could not load your GraphQL handler. \n Your Cells have been prerendered in the "Loading" state. \n');
    }

    return _promise.default.resolve(componentAsHtml);
  }
}

const runPrerender = async ({
  queryCache,
  renderPath
}) => {
  // registerApiSideBabelHook already includes the default api side babel
  // config. So what we define here is additions to the default config
  (0, _api.registerApiSideBabelHook)({
    plugins: [['babel-plugin-module-resolver', {
      alias: {
        api: (0, _paths.getPaths)().api.base,
        web: (0, _paths.getPaths)().web.base
      },
      loglevel: 'silent' // to silence the unnecessary warnings

    }]],
    overrides: [{
      test: ['./api/'],
      plugins: [['babel-plugin-module-resolver', {
        alias: {
          src: (0, _paths.getPaths)().api.src
        },
        loglevel: 'silent'
      }, 'exec-api-src-module-resolver']]
    }]
  });
  const gqlHandler = await (0, _graphql.getGqlHandler)(); // Prerender specific configuration
  // extends projects web/babelConfig

  (0, _web.registerWebSideBabelHook)({
    overrides: [{
      plugins: [['ignore-html-and-css-imports'], // webpack/postcss handles CSS imports
      [_babelPluginRedwoodPrerenderMediaImports.default]]
    }]
  });
  (0, _internal.registerShims)(renderPath);

  const indexContent = _fs.default.readFileSync((0, _internal.getRootHtmlPath)()).toString();

  const {
    default: App
  } = await _promise.default.resolve(`${(0, _paths.getPaths)().web.app}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
  const componentAsHtml = await recursivelyRender(App, renderPath, gqlHandler, queryCache);
  const {
    helmet
  } = global.__REDWOOD__HELMET_CONTEXT;

  const indexHtmlTree = _cheerio.default.load(indexContent);

  if (helmet) {
    const helmetElements = `
  ${helmet === null || helmet === void 0 ? void 0 : helmet.link.toString()}
  ${helmet === null || helmet === void 0 ? void 0 : helmet.meta.toString()}
  ${helmet === null || helmet === void 0 ? void 0 : helmet.script.toString()}
  ${helmet === null || helmet === void 0 ? void 0 : helmet.noscript.toString()}
  `; // Add all head elements

    indexHtmlTree('head').prepend(helmetElements); // Only change the title, if its not empty

    if (_cheerio.default.load(helmet === null || helmet === void 0 ? void 0 : helmet.title.toString())('title').text() !== '') {
      indexHtmlTree('title').replaceWith(helmet === null || helmet === void 0 ? void 0 : helmet.title.toString());
    }
  } // This is set by webpack by the html plugin


  indexHtmlTree('server-markup').replaceWith(componentAsHtml);
  const renderOutput = indexHtmlTree.html();
  return renderOutput;
}; // Used by cli at build time


exports.runPrerender = runPrerender;

const writePrerenderedHtmlFile = (outputHtmlPath, content) => {
  const outputHtmlAbsPath = _path.default.join((0, _paths.getPaths)().base, outputHtmlPath); // Copy default (unprerendered) index.html to 200.html first
  // This is to prevent recursively rendering the home page


  if (outputHtmlPath === 'web/dist/index.html') {
    const html200Path = _path.default.join((0, _paths.getPaths)().web.dist, '200.html');

    if (!_fs.default.existsSync(html200Path)) {
      _fs.default.copyFileSync(outputHtmlAbsPath, html200Path);
    }
  }

  (0, _internal.writeToDist)(outputHtmlAbsPath, content);
};

exports.writePrerenderedHtmlFile = writePrerenderedHtmlFile;