"use strict";
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var import_isCi = require("../isCi");
const mockValue = jest.fn().mockReturnValue(false);
jest.mock("is-ci", () => ({
  get isCi() {
    return mockValue();
  }
}));
const temporarilySet = /* @__PURE__ */ __name((object, prop, value) => {
  const original = object[prop];
  beforeEach(() => {
    setValueOnProcess(object, prop, value);
  });
  afterEach(() => {
    setValueOnProcess(object, prop, original);
  });
}, "temporarilySet");
const setValueOnProcess = /* @__PURE__ */ __name((object, prop, value) => {
  if (object === process.env && value === void 0) {
    delete object[prop];
  } else {
    object[prop] = value;
  }
}, "setValueOnProcess");
describe("isCi", () => {
  describe("when outside a TTY environment", () => {
    temporarilySet(process.stdin, "isTTY", false);
    test("returns false", () => {
      expect((0, import_isCi.isCi)()).toBe(true);
    });
  });
  describe("when in TTY environment", () => {
    temporarilySet(process.stdin, "isTTY", true);
    test("when isCiLib tells us so", () => {
      mockValue.mockReturnValueOnce(true);
      expect((0, import_isCi.isCi)()).toBe(true);
    });
    describe("with GitHub Actions env var", () => {
      temporarilySet(process.env, "GITHUB_ACTIONS", "true");
      test("returns true", () => {
        expect((0, import_isCi.isCi)()).toBe(true);
      });
    });
    describe("outside a CI environment, with TTY", () => {
      temporarilySet(process.stdin, "isTTY", true);
      temporarilySet(process.env, "GITHUB_ACTIONS", void 0);
      test("returns false", () => {
        mockValue.mockReturnValueOnce(false);
        expect((0, import_isCi.isCi)()).toBe(false);
      });
    });
  });
});
