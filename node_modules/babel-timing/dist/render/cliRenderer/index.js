"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_diff_stream_1 = __importDefault(require("ansi-diff-stream"));
const Table_1 = __importDefault(require("./Table"));
const utils_1 = require("./utils");
function renderFileList({ results, selected, diff, paginationSize, }) {
    const output = new Table_1.default({
        title: 'Babel timing - trasformed files',
        entries: results,
        entriesMap: [
            ['File', (entry) => entry.name],
            ['Total time(ms)', (entry) => entry.time.toFixed(3)],
        ],
        selectable: true,
        selected,
        onSelected: (selected) => {
            diff.clear();
            output.unmount();
            renderFileDetails({
                results,
                resultIndex: selected,
                diff,
                paginationSize,
            });
        },
        onSelectedCommandInfo: 'show file detail',
        paginationSize,
        onRender: (output) => {
            diff.write(output);
        },
    });
}
function renderFileDetails({ results, resultIndex, diff, paginationSize, }) {
    const fileResult = results[resultIndex];
    const output = new Table_1.default({
        title: `Babel timing - info for file: ${fileResult.name}`,
        entries: fileResult.plugins,
        entriesMap: [
            ['pluginAlias', (entry) => entry.name],
            ['time(ms)', (entry) => entry.time.toFixed(3)],
            ['visits', (entry) => entry.visits],
            ['time/visit(ms)', (entry) => entry.timePerVisit.toFixed(3)],
        ],
        onEscape: () => {
            diff.clear();
            output.unmount();
            renderFileList({ results, selected: resultIndex, diff, paginationSize });
        },
        onEscapeCommandInfo: 'back to results list',
        paginationSize,
        onRender: (output) => {
            diff.write(output);
        },
    });
}
function renderPluginList({ results, selected = 0, diff, paginationSize, }) {
    const output = new Table_1.default({
        title: 'Babel timing - plugins called',
        entries: results,
        entriesMap: [
            ['Plugin', (entry) => entry.name],
            ['Total time(ms)', (entry) => entry.time.toFixed(3)],
        ],
        selectable: true,
        selected,
        onSelected: (selected) => {
            diff.clear();
            output.unmount();
            renderPluginDetails({
                results,
                resultIndex: selected,
                diff,
                paginationSize,
            });
        },
        onSelectedCommandInfo: 'show plugin detail',
        paginationSize,
        onRender: (output) => {
            diff.write(output);
        },
    });
}
function renderPluginDetails({ results, resultIndex, diff, paginationSize, }) {
    const pluginResult = results[resultIndex];
    const output = new Table_1.default({
        title: `Babel timing - info for plugin: ${pluginResult.name}`,
        entries: pluginResult.files,
        entriesMap: [
            ['file', (entry) => entry.name],
            ['time(ms)', (entry) => entry.time.toFixed(3)],
            ['visits', (entry) => entry.visits],
            ['time/visit(ms)', (entry) => entry.timePerVisit.toFixed(3)],
        ],
        onEscape: () => {
            diff.clear();
            output.unmount();
            renderPluginList({
                results,
                selected: resultIndex,
                diff,
                paginationSize,
            });
        },
        onEscapeCommandInfo: 'back to results list',
        paginationSize,
        onRender: (output) => {
            diff.write(output);
        },
    });
}
// Duck type results to tell if data is aggregated by files or plugins.
// @TODO Find a better way to adjust renderer on data type
function isResultsByFile(results) {
    return results[0].hasOwnProperty('plugins');
}
function renderer(results = [], { paginationSize }) {
    utils_1.enableKeyPressEvent();
    // Init ansi-diff-stream
    const diff = ansi_diff_stream_1.default();
    diff.pipe(process.stdout);
    if (isResultsByFile(results)) {
        renderFileList({
            results,
            selected: 0,
            diff,
            paginationSize,
        });
    }
    else {
        renderPluginList({
            results,
            selected: 0,
            diff,
            paginationSize,
        });
    }
}
exports.default = renderer;
