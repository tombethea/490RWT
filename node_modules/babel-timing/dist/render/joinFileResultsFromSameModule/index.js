"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_mergewith_1 = __importDefault(require("lodash.mergewith"));
const Timer_1 = __importDefault(require("../../Timer"));
const utils_1 = require("../../utils");
const PACKAGE_NAME_REGEX = /(.*\/node_modules\/)((?:@.+?\/)?.+?\/)/;
// Return normalized name in case on "node_modules" package otherwise the original one
function normalizeResultName(name) {
    const parsed = PACKAGE_NAME_REGEX.exec(name);
    if (!parsed) {
        return name;
    }
    return parsed[0];
}
function mergeStrategy(objValue, srcValue) {
    // @TODO: this typeof checks are the only I found to type this function
    if (typeof objValue === 'number' && typeof srcValue === 'number') {
        return objValue + srcValue;
    }
    if (typeof objValue === 'object' && typeof srcValue === 'object') {
        return Timer_1.default.mergeVisits(...objValue, ...srcValue);
    }
    return objValue;
}
function joinFileResultsFromSameModule(results) {
    const normalizedResults = results.map((result) => ({
        ...result,
        name: normalizeResultName(result.name),
    }));
    return (normalizedResults
        // Get list of all name-normalized entries
        .map((result) => result.name)
        .filter(utils_1.onlyUnique)
        // Merge results with same name
        .map((name) => {
        const sameName = normalizedResults.filter((result) => result.name === name);
        return lodash_mergewith_1.default({}, ...sameName, mergeStrategy);
    }));
}
exports.default = joinFileResultsFromSameModule;
