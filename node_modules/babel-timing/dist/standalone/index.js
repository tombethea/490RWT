"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const core_1 = require("@babel/core");
const multimatch_1 = __importDefault(require("multimatch"));
const getImports_1 = __importDefault(require("./getImports"));
const utils_1 = require("../utils");
const Timer_1 = __importDefault(require("../Timer"));
const render_1 = __importDefault(require("../render"));
async function babelTiming(filePatterns = [], { babelConfig = false, followImports = false, include = ['**'], exclude = ['**/node_modules/**'], resolveMainFields = ['browser', 'module', 'main'], resolveExtensions = ['.js', '.jsx', '.mjs', '.ts'], expandPackages = false, output = 'return', outputPath = './babel-timing-results.json', aggregateBy = 'files', paginationSize = 10, } = {}) {
    const options = {
        babelConfig,
        followImports,
        include,
        exclude,
        resolveMainFields,
        resolveExtensions,
        expandPackages,
        output,
        outputPath,
        aggregateBy,
        paginationSize,
    };
    let files = utils_1.globPatternsToPaths(filePatterns);
    // Follow and recursively resolve all relative imports
    if (followImports) {
        const rawImportedFiles = await Promise.all(files.map((file) => getImports_1.default(file, options)));
        const importedFiles = rawImportedFiles.flat().filter(utils_1.onlyUnique);
        files = importedFiles;
    }
    // All file paths absolute
    files = files.map((file) => path_1.default.resolve(file));
    if (Array.isArray(include)) {
        files = multimatch_1.default(files, include);
    }
    if (Array.isArray(exclude)) {
        const negatedExclude = exclude.map((pattern) => `!${pattern}`);
        files = multimatch_1.default(files, ['**', ...negatedExclude]);
    }
    let results = files.map((file) => {
        const timer = new Timer_1.default(file);
        /*
         * Transform all gathered files one by one and collect
         * transform meta data using `wrapPluginVisitorMethod`
         * https://babeljs.io/docs/en/options#configfile
         */
        core_1.transformSync(fs_1.default.readFileSync(file).toString(), {
            filename: file,
            configFile: babelConfig ? path_1.default.join(process.cwd(), babelConfig) : false,
            minified: true,
            compact: true,
            wrapPluginVisitorMethod: timer.wrapPluginVisitorMethod,
        });
        return timer.getResults();
    });
    return render_1.default(results, {
        expandPackages,
        output,
        outputPath,
        aggregateBy,
        paginationSize,
    });
}
exports.default = babelTiming;
