"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_mergewith_1 = __importDefault(require("lodash.mergewith"));
const utils_1 = require("./utils");
class Timer {
    constructor(file) {
        this._events = {};
        this._results = {};
        this._file = file;
        this.wrapPluginVisitorMethod = (pluginAlias, visitorType, callback) => {
            const self = this;
            return function (...args) {
                self._push(pluginAlias);
                // @ts-ignore
                callback.apply(this, args);
                self._pop(pluginAlias);
            };
        };
    }
    _push(pluginAlias) {
        if (this._events[pluginAlias] === undefined) {
            this._events[pluginAlias] = [];
            this._results[pluginAlias] = {
                time: 0,
                visits: 0,
            };
        }
        this._events[pluginAlias].push(process.hrtime());
        this._results[pluginAlias].visits += 1;
    }
    _pop(pluginAlias) {
        var _a;
        const start = (_a = this._events) === null || _a === void 0 ? void 0 : _a[pluginAlias].shift();
        if (start) {
            const deltaInMS = Timer.getDeltaInMS(start);
            this._results[pluginAlias].time += deltaInMS;
        }
    }
    getResults() {
        const plugins = Object.keys(this._results)
            .map((pluginAlias) => {
            const entry = this._results[pluginAlias];
            return {
                name: pluginAlias,
                ...entry,
            };
        })
            .map(Timer.addTimePerVisitProperty)
            .sort(utils_1.sortByProperty('time'));
        return {
            name: this._file,
            time: Timer.getTotalTime(plugins),
            plugins,
        };
    }
    static getDeltaInMS(start) {
        const delta = process.hrtime(start);
        return delta[0] * 1e3 + delta[1] / 1e6;
    }
    static getTotalTime(results) {
        return results.reduce((total, entry) => total + entry.time, 0);
    }
    // To be used in .map
    static addTimePerVisitProperty(entry) {
        return {
            ...entry,
            timePerVisit: entry.time / entry.visits,
        };
    }
    static mergeVisits(...visitArray) {
        function mergeStrategy(objValue, srcValue) {
            if (typeof objValue === 'number' && typeof srcValue === 'number') {
                return objValue + srcValue;
            }
            return objValue;
        }
        const results = visitArray.flat();
        return (results
            // Get list of plugin names
            .map((entry) => entry.name)
            .filter(utils_1.onlyUnique)
            // Merge data entries with same plugin name
            .map((pluginName) => {
            const samePlugin = results.filter((data) => data.name === pluginName);
            return lodash_mergewith_1.default({}, ...samePlugin, mergeStrategy);
        })
            .map(Timer.addTimePerVisitProperty)
            .sort(utils_1.sortByProperty('time')));
    }
}
exports.default = Timer;
